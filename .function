#print a slice of a file, N lines long starting at line M
buckets () {
    # $1 : rsync command line file
    # $2 : starting line (starting bucket number)
    # $3 : number of lines (number of buckets)

    if (( $# != 3 )); then
        echo "Usage: $0 <rsync commands file> <number of buckets> <start bucket id>"
        return 1
    elif [ ! -f $1 ]; then
        echo "File not found: $1"
        return 2
    fi

    file=$1
    number=$2
    start=$3

    tail -n +${start} $file | head -${number}

    echo
    echo "Printed $1: lines $start - $(($start + $number - 1))"
}

function githubbify () {
    #requires:
    #    user definition in .ssh/config
    #    ssh key in .ssh
    #    an API token for GitHub
    #    the token defined as a git variable called github.token
    if (( $# != 2 )); then
        echo "Usage: $0 <repo name> <repo description>"
        return
    fi

    local user=efexgee
    #github.token is not a standard git field, I think
    local gh_token=`git config github.token`

    local name=$1
    local descr=$2

    local remote="gh.$name"

    local curl_data='{"name":"'$name'","description":"'$descr'"}'


    echo "Creating new repo ($remote) on GitHub..."
    curl -u $user:$gh_token https://api.github.com/user/repos -d "$curl_data" || return 1

    echo "Adding GitHub repo as a remote..."
    git remote add $remote ssh://github.com/$user/$name || return 2

    echo "Pushing local Git repo to GitHub repo..."
    git push --set-upstream $remote master || return 3
    echo "Done."
}

#shove an existing git repo into IHME's Bitbucket
function bbify () {
    #requires:
    if (( $# != 1 )); then
        echo "Usage: $0 <repo name>"
        return
    fi

    local user=$USER

    # Hack to not write to sadm_falko's Stash
    if [[ $user == "sadm_falko" ]]; then
        user='falko'
    fi

    local name=$1

    local URL="stash.ihme.washington.edu"

    local remote="ihme.$name"

    local curl_data='{"name":"'$name'","scmId":"git"}'
    local curl_header='Content-Type: application/json'

    echo "Creating new repo ($remote) on BitBucket..."
    curl -u $user https://$URL/rest/api/1.0/users/$user/repos -H "$curl_header" -X POST -d "$curl_data" || return 1

    echo "Adding BitBucket repo as a remote..."
    git remote add $remote "ssh://git@$URL:7999/~$user/$name.git" || return 2

    echo "Pushing local Git repo to BitBucket: $remote"
    git push --set-upstream $remote master || return 3
    echo "Done."
}

#list all running tars, deriving a label from the archive name
function tar_ps () {
    ps h -C tar k -etime -o etime,tty,args | sed "s#pts/##; s/ *tar .* \([^ ]*\)\.tar .*/ \1/" | sort -k3 | uniq -s 14 | sed 's/ \([0-9]\) /  \1 /'
}

#list all running rm's
function rm_ps () {
    if [ "$1" = "-u" ]; then
        ps h -C rm k -etime -o etime,tty,wchan:23,args | sort -k4 | uniq -s 47
    else
        ps h -C rm k -s,-etime -o s,etime,tty,wchan:23,args | sort -k5 | egrep "(^[RT]|$)"
    fi
}

#ssh and name your screen window for that host
function screensh () {
    local func_name=${FUNCNAME[0]}

    if ! (( $# == 1 || $# == 2)); then
        echo "Usage: $func_name <hostname>"
        return 1
    fi

    if [[ -z $STY ]]; then
        echo "Not inside a screen session. Plain ssh'ing instead."
    fi

    #TODO this is dirty and should support more replacements
    local USERNAME_REPLACEMENT="sed s/sadm_falko/sadm/"

    # Handle user@host format
    # cut -s returns nothing if the line contains no delimiters
    local user=$(echo $1 | cut -s -d@ -f1)
    local host=$(echo $1 | cut -d@ -f2 | sed 's/\..*//')

    # Default label is just the hostname
    local label="$host"

    # Only include username if it's different
    if [[ -n $user ]]; then
        if [[ $user != $USER ]]; then
            user=$(echo $user | $USERNAME_REPLACEMENT)
            label="${user}@${host}"
        fi
    fi

    if screen -X version > /dev/null 2>&1; then
        # I don't think we need TTYs on these windows
        #screen -X title "$(printf "%2s - %s" $(basename $(tty)) $label)"
        screen -X title "$label"
    fi

    ssh $1
}

#create a screen window and ssh to the host in it (will disappear when ssh dies)
function sshunt() {
    local func_name=${FUNCNAME[0]}

    if ! (( $# == 1 || $# == 2)); then
        echo "Usage: $func_name <hostname>"
        return 1
    fi

    if [[ -z $STY ]]; then
        echo "Not inside a screen session."
        return 2
    fi

    #TODO this is dirty and should support more replacements
    local USERNAME_REPLACEMENT="sed s/sadm_falko/sadm/"

    # Handle user@host format
    # cut -s returns nothing if the line contains no delimiters
    local user=$(echo $1 | cut -s -d@ -f1)
    local host=$(echo $1 | cut -d@ -f2 | sed 's/\..*//')

    # Default label is just the hostname
    local label="$host"

    # Only include username if it's different
    if [[ -n $user ]]; then
        if [[ $user != $USER ]]; then
            user=$(echo $user | $USERNAME_REPLACEMENT)
            label="${user}@${host}"
        fi
    fi

    if screen -X version > /dev/null 2>&1; then
        # I don't think we need TTYs on these windows
        #screen -X title "$(printf "%2s - %s" $(basename $(tty)) $label)"
        screen -S $STY -X screen -t "$label" ssh $1
    fi
}

# display what permissions and ownership new files will have
function whatami () {
    local default_perms=$(umask -S | sed 's/[ugo]=\(r*\)\(w*\)\(x*\)/@\1@#\2#%\3%/g' | sed 's/\(.\)\1/-/g' | tr -d  ',@#%')
    local effective_group=$(id -gn)
    echo "$default_perms $USER:$effective_group"
}

# sum a column of numbers
function total () {
    if (( $# != 1 )); then
        echo "Usage: total <column>"
        return 1
    fi

    local col=$1

    awk -v col=$col '{ tot += $col } END { print tot }'
}

# print a column (as awk would see it)
function awkcol () {
    local column

    if (( $# != 1 )); then
        # default to last column
        awk '{ print $NF }'
    else
        column=$1
        awk -v col=$column '{ print $col }'
    fi
}

# report whether an IP address pings
function check_ping () {
    local func_name=${FUNCNAME[0]}

    if (( $# != 1 )); then
        echo "Usage: $func_name <ip>"
        return 10
    fi

    local ip_address="$1"

    # hide the output but not errors so we can see
    # "ping: unknown host" etc.
    if ping -c 1 -w 1 $ip_address > /dev/null; then
        echo "$ip_address pings"
    else
        echo "$ip_address does not ping"
    fi
}

# set the screen window's title from anywhere
function stitle () {
    # Note: you can disable dynamic titles via:
    #       unset PROMPT_COMMAND
    local func_name=${FUNCNAME[0]}

    if (( $# != 1 )); then
        echo "Usage: $func_name <window title>"
        return 10
    fi

    local window_title="$1"

    echo -en "\033k${window_title}\033\\"
}

# perform DNS lookup across all DNS servers
function dns_check () {
    local func_name=${FUNCNAME[0]}

    if (( $# != 1 )); then
        echo "Usage: $func_name <hostname>"
        return 10
    fi

    local hostname=$1

    #Using domain server:
    #Name: infrastructure-bind-dns-p02
    #Address: 10.158.104.9#53
    #Aliases: 
    #
    #abraid-app-p01.ihme.washington.edu is an alias for abraid-app-p01.hosts.ihme.washington.edu.
    #abraid-app-p01.hosts.ihme.washington.edu has address 10.158.105.47

    #for dns_server in ad1 ad3 ad4 infrastructure-bind-dns-p01 infrastructure-bind-dns-p02; do
    for dns_server in 10.158.104.8 10.158.104.9 172.16.23.6 172.16.56.10 172.16.56.11 172.22.105.12 172.22.48.12; do
        echo "=== $dns_server ===" | egrep .
        host "$hostname" "$dns_server" | sed '
            /^Using domain server:/d
            /^Name:/d
            /^Address:/d
            /^Aliases:/d
            /^$/d
        '
    done
}

# run the dmesg with nicest flags supported on the system
function dmesg () {
    # THIS OVERRIDES THE dmesg COMMAND

    # find the dmesg command
    local dmesg_cmd=$(which dmesg)
    local args=$*

    # dmesg from util-linux 2.23.2
    $dmesg_cmd -TLkx $args 2> /dev/null ||
    # dmesg from util-linux 2.20.1
    $dmesg_cmd -Tkx $args 2> /dev/null ||
    # fallback
    $dmesg_cmd
}
